{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.7"
    },
    "colab": {
      "name": "xcs229ii_FinRL.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ammarhusain/XCS229ii-project/blob/main/dumps%20the%20grid%20of%20eval%20values\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-YeC-0LNes_B",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c81f57b-7a2e-45fa-8ad7-c73e9cab015e"
      },
      "source": [
        "# #Installing FinRL\n",
        "# %%capture\n",
        "# !pip install git+https://github.com/AI4Finance-LLC/FinRL-Library.git\n",
        "\n",
        "# #Installing Optuna\n",
        "# !pip install optuna\n",
        "# !pip install dm_tree\n",
        "# !pip install ray[tune]\n",
        "from IPython.display import clear_output\n",
        "\n",
        "#Importing the libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "# matplotlib.use('Agg')\n",
        "import datetime\n",
        "import optuna\n",
        "%matplotlib inline\n",
        "from finrl.apps import config\n",
        "from optuna.integration import PyTorchLightningPruningCallback\n",
        "from finrl.finrl_meta.preprocessor.yahoodownloader import YahooDownloader\n",
        "from finrl.finrl_meta.preprocessor.preprocessors import FeatureEngineer, data_split\n",
        "from finrl.finrl_meta.env_stock_trading.env_stocktrading import StockTradingEnv\n",
        "from finrl.finrl_meta.env_stock_trading.env_stocktrading_np import StockTradingEnv as StockTradingEnv_numpy\n",
        "from finrl.drl_agents.stablebaselines3.models import DRLAgent\n",
        "from finrl.drl_agents.rllib.models import DRLAgent as DRLAgent_rllib\n",
        "from finrl.finrl_meta.data_processor import DataProcessor\n",
        "import joblib\n",
        "from finrl.plot import backtest_stats, backtest_plot, get_daily_return, get_baseline\n",
        "import ray\n",
        "from pprint import pprint\n",
        "\n",
        "import numpy as np\n",
        "import gym\n",
        "from gym import spaces\n",
        "import copy\n",
        "\n",
        "import sys\n",
        "sys.path.append(\"../FinRL-Library\")\n",
        "\n",
        "import itertools\n",
        "\n",
        "import os\n",
        "exp_name = \"HypRL-FinRLbase/\"\n",
        "if not os.path.exists(exp_name + config.DATA_SAVE_DIR):\n",
        "    os.makedirs(exp_name + config.DATA_SAVE_DIR)\n",
        "if not os.path.exists(exp_name + config.TRAINED_MODEL_DIR):\n",
        "    os.makedirs(exp_name + config.TRAINED_MODEL_DIR)\n",
        "if not os.path.exists(exp_name + config.TENSORBOARD_LOG_DIR):\n",
        "    os.makedirs(exp_name + config.TENSORBOARD_LOG_DIR)\n",
        "if not os.path.exists(exp_name + config.RESULTS_DIR):\n",
        "    os.makedirs(exp_name + config.RESULTS_DIR)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/google/home/ammarh/anaconda3/lib/python3.7/site-packages/setuptools/distutils_patch.py:26: UserWarning: Distutils was imported before Setuptools. This usage is discouraged and may exhibit undesirable behaviors or errors. Please use Setuptools' objects directly or at least import Setuptools first.\n",
            "  \"Distutils was imported before Setuptools. This usage is discouraged \"\n",
            "/usr/local/google/home/ammarh/anaconda3/lib/python3.7/site-packages/pyfolio/pos.py:27: UserWarning: Module \"zipline.assets\" not found; multipliers will not be applied to position notionals.\n",
            "  'Module \"zipline.assets\" not found; multipliers will not be applied'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-7_4-NtOEZ3M"
      },
      "source": [
        "## Dataset Loading"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NIpYqBE9es_I"
      },
      "source": [
        "%%capture\n",
        "## Collecting and preprocessing data\n",
        "dataset_info = {'dow30' : [exp_name + \"dow_30_processed_full.pkl\", config.DOW_30_TICKER],\n",
        "                'hsi_50' : [exp_name + \"hsi_50_processed_full.pkl\", config.HSI_50_TICKER],\n",
        "                'dax_30' : [exp_name + \"dax_30_processed_full.pkl\", config.DAX_30_TICKER],\n",
        "                'nas100' : [exp_name + \"nas_100_processed_full.pkl\", config.NAS_100_TICKER],\n",
        "                'sp500' : [exp_name + \"sp_500_processed_full.pkl\", config.SP_500_TICKER]\n",
        "                 }\n",
        "datasets = {}\n",
        "print(dataset_info)\n",
        "for ds in dataset_info.keys():\n",
        "  print(f\"dataset_info[ds][0] {type(dataset_info[ds])} .. {ds}\")\n",
        "  if not os.path.exists(dataset_info[ds][0]):\n",
        "    print(f\"Processing {ds}\")\n",
        "    df = YahooDownloader(start_date = '2009-01-01',\n",
        "                        end_date = '2021-10-01',\n",
        "                        ticker_list = dataset_info[ds][1]).fetch_data()\n",
        "\n",
        "    fe = FeatureEngineer(\n",
        "                        use_technical_indicator=True,\n",
        "                        tech_indicator_list = config.TECHNICAL_INDICATORS_LIST,\n",
        "                        use_vix=True,\n",
        "                        use_turbulence=True,\n",
        "                        user_defined_feature = False)\n",
        "\n",
        "    processed = fe.preprocess_data(df)\n",
        "\n",
        "    list_ticker = processed[\"tic\"].unique().tolist()\n",
        "    list_date = list(pd.date_range(processed['date'].min(),processed['date'].max()).astype(str))\n",
        "    combination = list(itertools.product(list_date,list_ticker))\n",
        "\n",
        "    processed_full = pd.DataFrame(combination,columns=[\"date\",\"tic\"]).merge(processed,on=[\"date\",\"tic\"],how=\"left\")\n",
        "    processed_full = processed_full[processed_full['date'].isin(processed['date'])]\n",
        "    processed_full = processed_full.sort_values(['date','tic'])\n",
        "\n",
        "    processed_full = processed_full.fillna(0)\n",
        "    processed_full.to_pickle(dataset_info[ds][0])\n",
        "\n",
        "  datasets[ds] = pd.read_pickle(dataset_info[ds][0])\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T8gIXEf3es_J"
      },
      "source": [
        "## Setup datasets\n",
        "RL_AGENT_PARAMS = {\n",
        "    'DATASET' : 'dow30',\n",
        "    'TRAIN_PERIOD' : ['2010-01-01', '2015-12-31'],\n",
        "    'TRAIN_EVAL_PERIOD' : ['2016-01-01', '2017-12-31'],\n",
        "    \n",
        "}\n",
        "TRADER_BOT = {\n",
        "    'TRAIN_PERIOD' : ['2010-01-01', '2015-12-31'],\n",
        "    'TRAIN_EVAL_PERIOD' : ['2016-01-01', '2017-12-31'],\n",
        "    'TRADE_PERIOD' : ['2018-01-01', '2021-10-31'],\n",
        "}\n",
        "\n",
        "def get_string(params):\n",
        "  return params['DATASET'] + \"_train_\" + params['TRAIN_PERIOD'][0] + \"_\" + params['TRAIN_PERIOD'][1] \\\n",
        "  + \"_train_eval_\" + params['TRAIN_EVAL_PERIOD'][0] + \"_\" + params['TRAIN_EVAL_PERIOD'][1]\n",
        "\n",
        "def get_environments(params):\n",
        "  train_set = data_split(datasets[params['DATASET']], \n",
        "                        params['TRAIN_PERIOD'][0], params['TRAIN_PERIOD'][1])\n",
        "  train_eval_set = data_split(datasets[params['DATASET']], \n",
        "                        params['TRAIN_EVAL_PERIOD'][0], params['TRAIN_EVAL_PERIOD'][1])\n",
        "  stock_dimension = len(train_set.tic.unique())\n",
        "  state_space = 1 + 2*stock_dimension + len(config.TECHNICAL_INDICATORS_LIST)*stock_dimension\n",
        "  print(f\"Size of dataset splits - Training: {len(train_set)} , Trading: {len(train_eval_set)}, \\\n",
        "          Stock Dimension: {stock_dimension}, State Space: {state_space}\")\n",
        "\n",
        "  env_kwargs = {\n",
        "      \"hmax\": 100, \n",
        "      \"initial_amount\": 1000000, \n",
        "      \"buy_cost_pct\": 0.001,\n",
        "      \"sell_cost_pct\": 0.001,\n",
        "      \"state_space\": state_space, \n",
        "      \"stock_dim\": stock_dimension, \n",
        "      \"tech_indicator_list\": config.TECHNICAL_INDICATORS_LIST, \n",
        "      \"action_space\": stock_dimension, \n",
        "      \"reward_scaling\": 1e-4\n",
        "  }\n",
        "  # Setup gym environments for the FinRL child model\n",
        "  env_train_gym = StockTradingEnv(df = train_set, **env_kwargs)\n",
        "  env_train_eval_gym = StockTradingEnv(df = train_eval_set, turbulence_threshold = None, **env_kwargs)   \n",
        "  return env_train_gym, env_train_eval_gym"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ALe425tvo_mb"
      },
      "source": [
        "## Build the RL environment and agent"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7t4pXmwpo-tG"
      },
      "source": [
        "# Objective for tuning : Sharpe ratio\n",
        "def calculate_sharpe(df):\n",
        "  df['daily_return'] = df['account_value'].pct_change(1)\n",
        "  if df['daily_return'].std() !=0:\n",
        "    sharpe = (252**0.5)*df['daily_return'].mean()/ \\\n",
        "          df['daily_return'].std()\n",
        "    return sharpe\n",
        "  else:\n",
        "    return 0\n",
        "\n",
        "def evaluate(hyperparameters, env_train_gym, env_train_eval_gym, total_timesteps):\n",
        "  agent = DRLAgent(env = env_train_gym.get_sb_env()[0])\n",
        "  model_ddpg = agent.get_model(\"ddpg\", model_kwargs = hyperparameters, verbose=0)\n",
        "  trained_ddpg = agent.train_model(model=model_ddpg,\n",
        "                                  tb_log_name=\"ddpg_optuna\",\n",
        "                                  total_timesteps=total_timesteps)\n",
        "  # trained_ddpg.save('trained_models/optuna/ddpg_{}.pth'.format(trial.number))\n",
        "  # clear_output(wait=True)\n",
        "  # For the given hyperparamters, determine the account value in the trading period\n",
        "  df_account_value, df_actions = DRLAgent.DRL_prediction(\n",
        "    model=trained_ddpg, \n",
        "    environment = env_train_eval_gym)\n",
        "  # Calculate sharpe from the account value\n",
        "  return calculate_sharpe(df_account_value)\n",
        "\n",
        "class TunableHP:\n",
        "  def __init__(self, env_train_gym, env_train_eval_gym):\n",
        "    self.hyperparameters = {\n",
        "      \"gamma\" : [0.9, 0.95, 0.98, 0.99, 0.995, 0.999, 0.9999],\n",
        "      \"learning_rate\" : [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1],\n",
        "      \"batch_size\" : [16, 32, 64, 100, 128, 256, 512, 1024, 2048],\n",
        "      \"buffer_size\" : [int(1e4), int(1e5), int(1e6)]    \n",
        "    }\n",
        "    self.hyperparameter_keys = list(self.hyperparameters) \n",
        "    self.env_train_gym = env_train_gym\n",
        "    self.env_train_eval_gym = env_train_eval_gym\n",
        "  def mapStateToHP(self,state):\n",
        "    hp_dict = {}\n",
        "    for p,i in enumerate(state):\n",
        "      param_key = self.hyperparameter_keys[p]\n",
        "      hp_dict[param_key] = self.hyperparameters[param_key][i]\n",
        "    return hp_dict\n",
        "  \n",
        "  def getGridSize(self):\n",
        "    return [len(self.hyperparameters[k]) for k in self.hyperparameter_keys]\n",
        "\n",
        "  def evaluateRLAgent(self, state):\n",
        "    hp_dict = self.mapStateToHP(state)\n",
        "    print(f\"Running evaluation for : {state} -> {hp_dict}\")\n",
        "    # log to tensorboard if needed\n",
        "    self.env_train_gym.reset()\n",
        "    self.env_train_eval_gym.reset()\n",
        "    return evaluate(hp_dict, self.env_train_gym, self.env_train_eval_gym, 5000)\n",
        "\n",
        "\n",
        "class HypRLGridEnv(gym.Env):\n",
        "  \"\"\"\n",
        "  Custom Environment that follows gym interface.\n",
        "  \"\"\"\n",
        "  MAX_ITER = 10\n",
        "\n",
        "  def __init__(self, tunableParams: TunableHP):\n",
        "    super(HypRLGridEnv, self).__init__()\n",
        "\n",
        "    self.tunableParams = tunableParams\n",
        "\n",
        "    # Size of the grid\n",
        "    self.grid_size = tunableParams.getGridSize()\n",
        "    \n",
        "    # Define action and observation space\n",
        "    n_actions = 5\n",
        "    self.action_space = spaces.Box(low=-int(n_actions/2), high=int(n_actions/2), shape=(len(self.grid_size),), dtype=np.int32)\n",
        "    # The observation will be the coordinate of the agent\n",
        "    self.observation_space = spaces.MultiDiscrete(self.grid_size)\n",
        "    self.eval_cache = np.zeros(self.grid_size) - 1.0\n",
        "\n",
        "  def eval(self, state):\n",
        "    state = tuple(state)\n",
        "    if self.eval_cache[state] == [-1.0]:\n",
        "      # train & test the model for these hyperparameters\n",
        "      self.eval_cache[state] = self.tunableParams.evaluateRLAgent(state)\n",
        "    return self.eval_cache[state]\n",
        "\n",
        "  def reset(self):\n",
        "    \"\"\"\n",
        "    Important: the observation must be a numpy array\n",
        "    :return: (np.array) \n",
        "    \"\"\"\n",
        "    # reset the number of iterations for this agent\n",
        "    self.iter = 0\n",
        "    # Initialize the agent at the right of the grid\n",
        "    self.agent_state = np.random.randint(self.grid_size)\n",
        "    self.reward = self.eval(self.agent_state)\n",
        "    self.best = {'state':copy.deepcopy(self.agent_state), 'val':self.eval(self.agent_state)}\n",
        "    self.visited = {}\n",
        "    self.visited[tuple(self.agent_state)] = True\n",
        "    return np.array(self.agent_state) \n",
        "\n",
        "  def step(self, action):\n",
        "    self.iter += 1\n",
        "\n",
        "    for i, _ in enumerate(action):\n",
        "      self.agent_state[i] += round(action[i])\n",
        "      # Account for the boundaries of the grid\n",
        "      self.agent_state[i] = np.clip(self.agent_state[i], 0, self.grid_size[i]-1)\n",
        "\n",
        "    # We are done when we visit the same state twice or have taken more iterations than MAX\n",
        "    done = bool(self.iter >= self.MAX_ITER or tuple(self.agent_state) in self.visited)\n",
        "\n",
        "    self.visited[tuple(self.agent_state)] = True\n",
        "\n",
        "    # reward idea #1\n",
        "    # Reward is minimum of whatever val loss we saw so far\n",
        "    self.reward = max(self.reward, self.eval(self.agent_state))\n",
        "    # Null reward everywhere except when the episode terminates\n",
        "    reward = self.reward if done else 0\n",
        "\n",
        "    # reward idea #2\n",
        "    # set the reward to that observed in the final state\n",
        "    #reward = self.eval(self.agent_state) if done else 0\n",
        "\n",
        "    # reward idea #3\n",
        "    # let the agent accumulate reward as it goes\n",
        "    # self.reward += self.eval(self.agent_state)\n",
        "    # reward = self.reward\n",
        "\n",
        "    if self.eval(self.agent_state) > self.best['val']:\n",
        "      self.best = {'state':copy.deepcopy(self.agent_state), 'val':self.eval(self.agent_state)}\n",
        "\n",
        "    # Optionally we can pass additional info\n",
        "    info = {}\n",
        "    info['best'] = self.best\n",
        "    info['visited'] = self.visited\n",
        "\n",
        "    return np.array(self.agent_state), reward, done, info\n",
        "\n",
        "\n",
        "# # check and make sure the environment is sane and working\n",
        "# from stable_baselines3.common.env_checker import check_env\n",
        "# # If the environment doesn't follow the interface, an error will be thrown\n",
        "# hyprl_env = HypRLGridEnv(TunableHP(*get_environments(RL_AGENT_PARAMS)))\n",
        "# check_env(hyprl_env, warn=True)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# cache saver\n",
        "%%time\n",
        "SAVER_PARAMS = {\n",
        "    'TRAIN_PERIOD' : ['2010-01-01', '2015-12-31'],\n",
        "    'TRAIN_EVAL_PERIOD' : ['2016-01-01', '2017-12-31'],\n",
        "    \n",
        "}\n",
        "import itertools\n",
        "for ds in dataset_info.keys():\n",
        "  print(f\"Caching for dataset: {ds}\")\n",
        "  SAVER_PARAMS['DATASET'] = ds \n",
        "  hyprl_env = HypRLGridEnv(TunableHP(*get_environments(SAVER_PARAMS)))\n",
        "  # generate the eval_cache\n",
        "  grid_size = hyprl_env.tunableParams.getGridSize()\n",
        "  hyperparameter_ranges = [range(gs) for gs in grid_size]\n",
        "  for s in list(itertools.product(*hyperparameter_ranges)):\n",
        "    hyprl_env.eval(s)  \n",
        "    np.save('cached_results/' + get_string(SAVER_PARAMS) + '.npy', hyprl_env.eval_cache)\n",
        "\n",
        "\n",
        "assert(1==0)\n",
        "  # hyprl_env.eval(np.array([0,0]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kt-Sg-HMrfMH",
        "outputId": "4c941821-013d-4e41-9735-890dae24c419"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Caching for dataset: dow30\n",
            "Size of dataset splits - Training: 43761 , Trading: 14587,           Stock Dimension: 29, State Space: 291\n",
            "Running evaluation for : (0, 0, 0, 0) -> {'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 16, 'buffer_size': 10000}\n",
            "{'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 16, 'buffer_size': 10000}\n",
            "hit end!\n",
            "Running evaluation for : (0, 0, 0, 1) -> {'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 16, 'buffer_size': 100000}\n",
            "{'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 16, 'buffer_size': 100000}\n",
            "day: 1508, episode: 10\n",
            "begin_total_asset: 1000000.00\n",
            "end_total_asset: 1956780.19\n",
            "total_reward: 956780.19\n",
            "total_cost: 6672.31\n",
            "total_trades: 30294\n",
            "Sharpe: 0.935\n",
            "=================================\n",
            "hit end!\n",
            "Running evaluation for : (0, 0, 0, 2) -> {'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 16, 'buffer_size': 1000000}\n",
            "{'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 16, 'buffer_size': 1000000}\n",
            "day: 1508, episode: 20\n",
            "begin_total_asset: 1000000.00\n",
            "end_total_asset: 1851261.74\n",
            "total_reward: 851261.74\n",
            "total_cost: 1703.71\n",
            "total_trades: 21140\n",
            "Sharpe: 0.763\n",
            "=================================\n",
            "hit end!\n",
            "Running evaluation for : (0, 0, 1, 0) -> {'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 32, 'buffer_size': 10000}\n",
            "{'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 32, 'buffer_size': 10000}\n",
            "hit end!\n",
            "Running evaluation for : (0, 0, 1, 1) -> {'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 32, 'buffer_size': 100000}\n",
            "{'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 32, 'buffer_size': 100000}\n",
            "hit end!\n",
            "Running evaluation for : (0, 0, 1, 2) -> {'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 32, 'buffer_size': 1000000}\n",
            "{'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 32, 'buffer_size': 1000000}\n",
            "day: 1508, episode: 40\n",
            "begin_total_asset: 1000000.00\n",
            "end_total_asset: 2233962.95\n",
            "total_reward: 1233962.95\n",
            "total_cost: 1700.86\n",
            "total_trades: 16676\n",
            "Sharpe: 0.956\n",
            "=================================\n",
            "hit end!\n",
            "Running evaluation for : (0, 0, 2, 0) -> {'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 64, 'buffer_size': 10000}\n",
            "{'gamma': 0.9, 'learning_rate': 1e-05, 'batch_size': 64, 'buffer_size': 10000}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "hyprl_env.eval([2,2,3,2])  \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 409
        },
        "id": "N1Nrosq-6sAz",
        "outputId": "b70eeefa-3378-441d-bc7f-398f2b2fb0f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Running evaluation for : (2, 2, 3, 2) -> {'gamma': 0.98, 'learning_rate': 0.001, 'batch_size': 100, 'buffer_size': 1000000}\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<timed eval>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-4-d7cab0d0acc8>\u001b[0m in \u001b[0;36meval\u001b[0;34m(self, state)\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval_cache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m       \u001b[0;31m# train & test the model for these hyperparameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 81\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval_cache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtunableParams\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluateRLAgent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     82\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval_cache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-4-d7cab0d0acc8>\u001b[0m in \u001b[0;36mevaluateRLAgent\u001b[0;34m(self, state)\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Running evaluation for : {state} -> {hp_dict}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m     \u001b[0;31m# log to tensorboard if needed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m     \u001b[0menv_train_gym\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m     \u001b[0menv_train_eval_gym\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhp_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv_train_gym\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv_train_eval_gym\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'env_train_gym' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AnOq39NCtzbi"
      },
      "source": [
        "### Hyp-RL Agent"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "p_gxuc5NtwcW",
        "outputId": "d26ef381-c5a4-4757-ed60-6e838dc1302b"
      },
      "source": [
        "from stable_baselines3 import DQN, PPO, A2C\n",
        "from stable_baselines3.common.env_util import make_vec_env\n",
        "#from stable_baselines3.common.policies import MlpPolicy\n",
        "# # Instantiate the env\n",
        "hyprl_env = HypRLGridEnv(TunableHP(*get_environments(RL_AGENT_PARAMS)))\n",
        "# wrap it\n",
        "hyprl_env = make_vec_env(lambda: hyprl_env, n_envs=1)\n",
        "\n",
        "# Train the agent\n",
        "##model = ACKTR('MlpPolicy', env, verbose=1).learn(5000)\n",
        "hyprl_model = A2C('MlpPolicy', hyprl_env, verbose=1)\n",
        "#hyprl_model = DQN('MlpPolicy', hyprl_env, verbose=1)\n",
        "# hyprl_model = PPO('MlpPolicy', hyprl_env, verbose=1)\n",
        "hyprl_model.learn(total_timesteps=50000)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Size of dataset splits - Training: 43761 , Trading: 14587,           Stock Dimension: 29, State Space: 291\n",
            "Using cuda device\n",
            "Running evaluation for : (4, 4, 7, 0) -> {'gamma': 0.995, 'learning_rate': 0.1, 'batch_size': 1024, 'buffer_size': 10000}\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-7-b1d427bcda98>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m#hyprl_model = DQN('MlpPolicy', hyprl_env, verbose=1)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# hyprl_model = PPO('MlpPolicy', hyprl_env, verbose=1)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mhyprl_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtotal_timesteps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/stable_baselines3/a2c/a2c.py\u001b[0m in \u001b[0;36mlearn\u001b[0;34m(self, total_timesteps, callback, log_interval, eval_env, eval_freq, n_eval_episodes, tb_log_name, eval_log_path, reset_num_timesteps)\u001b[0m\n\u001b[1;32m    199\u001b[0m             \u001b[0mtb_log_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtb_log_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    200\u001b[0m             \u001b[0meval_log_path\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0meval_log_path\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 201\u001b[0;31m             \u001b[0mreset_num_timesteps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreset_num_timesteps\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    202\u001b[0m         )\n",
            "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/stable_baselines3/common/on_policy_algorithm.py\u001b[0m in \u001b[0;36mlearn\u001b[0;34m(self, total_timesteps, callback, log_interval, eval_env, eval_freq, n_eval_episodes, tb_log_name, eval_log_path, reset_num_timesteps)\u001b[0m\n\u001b[1;32m    228\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    229\u001b[0m         total_timesteps, callback = self._setup_learn(\n\u001b[0;32m--> 230\u001b[0;31m             \u001b[0mtotal_timesteps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meval_env\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meval_freq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_eval_episodes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meval_log_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset_num_timesteps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtb_log_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    231\u001b[0m         )\n\u001b[1;32m    232\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/stable_baselines3/common/base_class.py\u001b[0m in \u001b[0;36m_setup_learn\u001b[0;34m(self, total_timesteps, eval_env, callback, eval_freq, n_eval_episodes, log_path, reset_num_timesteps, tb_log_name)\u001b[0m\n\u001b[1;32m    424\u001b[0m         \u001b[0;31m# Avoid resetting the environment when calling ``.learn()`` consecutive times\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    425\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mreset_num_timesteps\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_last_obs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 426\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_last_obs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pytype: disable=annotation-type-mismatch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    427\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_last_episode_starts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnum_envs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbool\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    428\u001b[0m             \u001b[0;31m# Retrieve unnormalized observation for saving into the buffer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/stable_baselines3/common/vec_env/dummy_vec_env.py\u001b[0m in \u001b[0;36mreset\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mVecEnvObs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0menv_idx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnum_envs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m             \u001b[0mobs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menvs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0menv_idx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_save_obs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menv_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_obs_from_buf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/stable_baselines3/common/monitor.py\u001b[0m in \u001b[0;36mreset\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m     77\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Expected you to pass keyword argument {key} into reset\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcurrent_reset_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 79\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     80\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maction\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mUnion\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mGymStepReturn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-4-d7cab0d0acc8>\u001b[0m in \u001b[0;36mreset\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     91\u001b[0m     \u001b[0;31m# Initialize the agent at the right of the grid\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0magent_state\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrid_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreward\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0magent_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     94\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'state'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdeepcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0magent_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'val'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0magent_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisited\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-4-d7cab0d0acc8>\u001b[0m in \u001b[0;36meval\u001b[0;34m(self, state)\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval_cache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m       \u001b[0;31m# train & test the model for these hyperparameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 81\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval_cache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtunableParams\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluateRLAgent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     82\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval_cache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-4-d7cab0d0acc8>\u001b[0m in \u001b[0;36mevaluateRLAgent\u001b[0;34m(self, state)\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Running evaluation for : {state} -> {hp_dict}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m     \u001b[0;31m# log to tensorboard if needed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m     \u001b[0menv_train_gym\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m     \u001b[0menv_train_eval_gym\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhp_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv_train_gym\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv_train_eval_gym\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'env_train_gym' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"{hyprl_env.envs[0].eval_cache}\")\n",
        "hyprl_env.action_space.sample()"
      ],
      "metadata": {
        "id": "BywT00kPWgGk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wb0mvA28dKRz"
      },
      "source": [
        "# Test the trained agent for sanity checking on the same environment\n",
        "\n",
        "obs = hyprl_env.reset()\n",
        "n_steps = 20\n",
        "for step in range(n_steps):\n",
        "  action, _ = hyprl_model.predict(obs, deterministic=True)\n",
        "  # print(\"Step {}\".format(step + 1))\n",
        "  # print(\"Action: \", action)\n",
        "  #pdb.set_trace()\n",
        "  obs, reward, done, info = hyprl_env.step(action)\n",
        "  if done:\n",
        "    # Note that the VecEnv resets automatically\n",
        "    # when a done signal is encountered\n",
        "    print(\"Goal reached!\", \"reward=\", reward, \"final_state=\", info[0]['terminal_observation'], \"best=\", info[0]['best'])\n",
        "    print(f\"info {info}\")\n",
        "    break\n",
        "  print('obs=', obs, 'reward=', reward, 'done=', done, 'info', info)\n",
        "  #env.render(mode='console')\n",
        "\n",
        "np.set_printoptions(formatter={'float': lambda x: \"{0:0.3f}\".format(x)})\n",
        "print(f\"{hyprl_env.envs[0].eval_cache}\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "73ocXYxFes_K"
      },
      "source": [
        "# %%capture\n",
        "### Trading bot model\n",
        "## Setup Training environment\n",
        "env_kwargs = {\n",
        "    \"hmax\": 100, \n",
        "    \"initial_amount\": 1000000, \n",
        "    \"buy_cost_pct\": 0.001,\n",
        "    \"sell_cost_pct\": 0.001,\n",
        "    \"state_space\": state_space, \n",
        "    \"stock_dim\": stock_dimension, \n",
        "    \"tech_indicator_list\": config.TECHNICAL_INDICATORS_LIST, \n",
        "    \"action_space\": stock_dimension, \n",
        "    \"reward_scaling\": 1e-4\n",
        "}\n",
        "e_train_gym = StockTradingEnv(df = train, **env_kwargs)\n",
        "agent = DRLAgent(env = e_train_gym.get_sb_env()[0])\n",
        "## DDPG model\n",
        "model_ddpg = agent.get_model(\"ddpg\")\n",
        "# Setup Trading environment\n",
        "e_train_eval_gym = StockTradingEnv(df = train_eval, turbulence_threshold = None, **env_kwargs)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wyFjTYeGes_L"
      },
      "source": [
        "%%time\n",
        "%%capture\n",
        "trained_ddpg = agent.train_model(model=model_ddpg, \n",
        "                             tb_log_name='ddpg',\n",
        "                             total_timesteps=10000)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "  #For the given hyperparamters, determine the account value in the trading period\n",
        "  df_account_value, df_actions = DRLAgent.DRL_prediction(\n",
        "    model=trained_ddpg, \n",
        "    environment = e_train_eval_gym)\n",
        "  #Calculate sharpe from the account value\n",
        "  sharpe = calculate_sharpe(df_account_value)\n",
        "\n",
        "perf_stats_all = pd.DataFrame(backtest_stats(account_value=df_account_value))\n",
        "#print(f\"Baseline stats: {perf_stats_all}\")"
      ],
      "metadata": {
        "id": "WF0SjHNrQxgJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l2sR6Ge6es_M"
      },
      "source": [
        "## Optuna baseline\n",
        "\n",
        "Full [link](https://github.com/DLR-RM/rl-baselines3-zoo/blob/master/utils/hyperparams_opt.py) of optimizable parameters for each algorithm"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bDNUNU2Wes_O"
      },
      "source": [
        "from IPython.display import clear_output\n",
        "\n",
        "def sample_ddpg_params(trial:optuna.Trial):\n",
        "  # Size of the replay buffer\n",
        "  buffer_size = trial.suggest_categorical(\"buffer_size\", [int(1e4), int(1e5), int(1e6)])\n",
        "  learning_rate = trial.suggest_loguniform(\"learning_rate\", 1e-5, 1)\n",
        "  batch_size = trial.suggest_categorical(\"batch_size\", [32, 64, 128, 256, 512])\n",
        "  \n",
        "  return {\"buffer_size\": buffer_size,\n",
        "          \"learning_rate\":learning_rate,\n",
        "          \"batch_size\":batch_size}\n",
        "\n",
        "# Objective for tuning : Sharpe ratio\n",
        "def calculate_sharpe(df):\n",
        "  df['daily_return'] = df['account_value'].pct_change(1)\n",
        "  if df['daily_return'].std() !=0:\n",
        "    sharpe = (252**0.5)*df['daily_return'].mean()/ \\\n",
        "          df['daily_return'].std()\n",
        "    return sharpe\n",
        "  else:\n",
        "    return 0\n",
        "  \n",
        "  \n",
        "def objective(trial:optuna.Trial):\n",
        "  #Trial will suggest a set of hyperparamters from the specified range\n",
        "  hyperparameters = sample_ddpg_params(trial)\n",
        "  model_ddpg = agent.get_model(\"ddpg\",model_kwargs = hyperparameters, verbose=0)\n",
        "  trained_ddpg = agent.train_model(model=model_ddpg,\n",
        "                                  tb_log_name=\"ddpg_optuna\",\n",
        "                                  total_timesteps=5000)\n",
        "  trained_ddpg.save('trained_models/optuna/ddpg_{}.pth'.format(trial.number))\n",
        "  clear_output(wait=True)\n",
        "  #For the given hyperparamters, determine the account value in the trading period\n",
        "  df_account_value, df_actions = DRLAgent.DRL_prediction(\n",
        "    model=trained_ddpg, \n",
        "    environment = e_train_eval_gym)\n",
        "  #Calculate sharpe from the account value\n",
        "  sharpe = calculate_sharpe(df_account_value)\n",
        "\n",
        "  return sharpe\n",
        "\n",
        "#Create a study object and specify the direction as 'maximize'\n",
        "#As you want to maximize sharpe\n",
        "#Pruner stops not promising iterations\n",
        "#Use a pruner, else you will get error related to divergence of model\n",
        "#You can also use Multivariate samplere\n",
        "#sampler = optuna.samplers.TPESampler(multivarite=True,seed=42)\n",
        "sampler = optuna.samplers.TPESampler(seed=42)\n",
        "study = optuna.create_study(study_name=\"ddpg_study\",direction='maximize',\n",
        "                            sampler = sampler, pruner=optuna.pruners.HyperbandPruner())\n",
        "\n",
        "#You can increase the n_trials for a better search space scanning\n",
        "study.optimize(objective, n_trials=30,catch=(ValueError,))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fODNqNW8es_P"
      },
      "source": [
        "#Get the best hyperparamters\n",
        "print('Hyperparameters after tuning',study.best_params)\n",
        "print('Hyperparameters before tuning',config.DDPG_PARAMS)\n",
        "study.best_trial\n",
        "from stable_baselines3 import DDPG\n",
        "tuned_model_ddpg = DDPG.load('trained_models/optuna/ddpg_{}.pth'.format(study.best_trial.number),env=env_train)\n",
        "#Trading period account value with tuned model\n",
        "df_account_value_tuned, df_actions_tuned = DRLAgent.DRL_prediction(\n",
        "    model=tuned_model_ddpg, \n",
        "    environment = e_train_eval_gym)\n",
        "\n",
        "perf_stats_all_tuned = backtest_stats(account_value=df_account_value_tuned)\n",
        "perf_stats_all_tuned = pd.DataFrame(perf_stats_all_tuned)\n",
        "print(f\"Baseline stats: {perf_stats_all_tuned}\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zwjbHZwRes_P"
      },
      "source": [
        "## XCS229ii Algorithm"
      ]
    }
  ]
}